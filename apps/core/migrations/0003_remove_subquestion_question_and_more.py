# Generated by Django 4.2.24 on 2025-10-20 12:40

from django.db import migrations, models, connection
import django.db.models.deletion


def backfill_topic_category(apps, schema_editor):
    # Populate topics.category_id from legacy sub_sections.category_id if tables still present
    with schema_editor.connection.cursor() as cursor:
        try:
            cursor.execute(
                """
                UPDATE topics t
                JOIN sub_sections s ON t.sub_section_id = s.sub_section_id
                SET t.category_id = s.category_id
                WHERE t.category_id IS NULL
                """
            )
        except Exception:
            # If sub_sections no longer exists or columns missing, ignore
            pass


def drop_legacy_columns_and_tables(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        try:
            cursor.execute("SET FOREIGN_KEY_CHECKS=0")
        except Exception:
            pass
        # Drop legacy columns if still exist
        try:
            cursor.execute("ALTER TABLE topics DROP COLUMN sub_section_id")
        except Exception:
            pass
        try:
            cursor.execute("ALTER TABLE answers DROP COLUMN sub_question_id")
        except Exception:
            pass
        # Drop legacy tables if still exist (safety)
        try:
            cursor.execute("DROP TABLE IF EXISTS sub_questions")
        except Exception:
            pass
        try:
            cursor.execute("DROP TABLE IF EXISTS sub_sections")
        except Exception:
            pass
        try:
            cursor.execute("SET FOREIGN_KEY_CHECKS=1")
        except Exception:
            pass


def make_topic_category_not_null(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        try:
            cursor.execute("ALTER TABLE topics MODIFY COLUMN category_id INT NOT NULL")
        except Exception:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_add_skip_fields'),
    ]

    operations = [
        # Skip per-column drops for legacy tables/columns; handled via RunPython with IF EXISTS
        migrations.AddField(
            model_name='topic',
            name='category',
            field=models.ForeignKey(db_column='category_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['category'], name='topic_category_id_idx'),
        ),
        migrations.RunPython(backfill_topic_category, reverse_code=migrations.RunPython.noop),
        # Table drops handled in RunPython above to control FK constraints
        migrations.RunPython(drop_legacy_columns_and_tables, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(make_topic_category_not_null, reverse_code=migrations.RunPython.noop),
    ]
