# Generated by Django 4.2.24 on 2025-10-20 05:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountLockout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locked_at', models.DateTimeField(auto_now_add=True)),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('reason', models.CharField(max_length=200)),
                ('failed_attempts', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'account_lockouts',
            },
        ),
        migrations.CreateModel(
            name='AdminActivityLog',
            fields=[
                ('log_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.CharField(blank=True, max_length=50, null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'admin_activity_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AdminSession',
            fields=[
                ('session_id', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'admin_sessions',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('admin_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.CharField(max_length=150, unique=True)),
                ('password_hash', models.CharField(max_length=255)),
                ('full_name', models.CharField(blank=True, max_length=150, null=True)),
                ('admin_level', models.CharField(choices=[('central', 'Central Office'), ('region', 'Region'), ('division', 'Division'), ('district', 'District'), ('school', 'School')], max_length=10)),
                ('assigned_area', models.CharField(blank=True, max_length=150, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=10)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile_image', models.CharField(blank=True, max_length=255, null=True)),
                ('can_create_users', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_set_deadlines', models.BooleanField(default=False)),
                ('can_approve_submissions', models.BooleanField(default=False)),
                ('can_view_system_logs', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'admin_user',
            },
        ),
        migrations.CreateModel(
            name='AdminUserPermission',
            fields=[
                ('permission_id', models.AutoField(primary_key=True, serialize=False)),
                ('permission_name', models.CharField(max_length=100)),
                ('resource_type', models.CharField(choices=[('user', 'User Management'), ('form', 'Form Management'), ('report', 'Report Management'), ('system', 'System Management'), ('school_data', 'School Data')], max_length=20)),
                ('action', models.CharField(choices=[('create', 'Create'), ('read', 'Read'), ('update', 'Update'), ('delete', 'Delete'), ('approve', 'Approve'), ('manage', 'Manage')], max_length=10)),
                ('scope', models.CharField(choices=[('own', 'Own Data Only'), ('assigned_area', 'Assigned Area'), ('all', 'All Data')], default='assigned_area', max_length=15)),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'admin_user_permissions',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False)),
                ('response', models.TextField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'answers',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('action_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('create', 'Create Record'), ('read', 'Read Record'), ('update', 'Update Record'), ('delete', 'Delete Record'), ('export', 'Data Export'), ('import', 'Data Import'), ('permission_change', 'Permission Change'), ('security_change', 'Security Setting Change'), ('failed_login', 'Failed Login Attempt'), ('password_change', 'Password Change'), ('account_lock', 'Account Locked'), ('account_unlock', 'Account Unlocked'), ('data_access', 'Sensitive Data Access'), ('backup', 'Data Backup'), ('restore', 'Data Restore')], max_length=20)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('encrypted_data', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('edit', 'Edit'), ('delete', 'Delete')], max_length=10)),
                ('old_value', models.JSONField(blank=True, null=True)),
                ('new_value', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'audit_trail',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('display_order', models.IntegerField()),
            ],
            options={
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='DataRetentionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Policy', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('retention_period_days', models.IntegerField(default=365)),
                ('data_types', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'data_retention_policies',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'districts',
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'divisions',
            },
        ),
        migrations.CreateModel(
            name='EncryptionKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_id', models.CharField(max_length=50, unique=True)),
                ('key_purpose', models.CharField(max_length=100)),
                ('encrypted_key', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('rotation_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Encryption Key',
                'verbose_name_plural': 'Encryption Keys',
                'db_table': 'encryption_keys',
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('form_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('district_pending', 'Pending District Review'), ('district_approved', 'District Approved'), ('district_returned', 'Returned to School'), ('division_pending', 'Pending Division Review'), ('division_approved', 'Division Approved'), ('division_returned', 'Returned to District'), ('region_pending', 'Pending Region Review'), ('region_approved', 'Region Approved'), ('region_returned', 'Returned to Division'), ('central_pending', 'Pending Central Review'), ('central_approved', 'Central Approved'), ('central_returned', 'Returned to Region'), ('completed', 'Completed')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('current_level', models.CharField(choices=[('school', 'School'), ('district', 'District'), ('division', 'Division'), ('region', 'Region'), ('central', 'Central Office')], default='school', max_length=10)),
                ('last_reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('form_type', models.CharField(default='standard', max_length=50)),
                ('academic_year', models.CharField(default='2024-2025', max_length=10)),
                ('submission_deadline', models.DateTimeField(blank=True, null=True)),
                ('last_reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_forms', to='core.adminuser')),
            ],
            options={
                'db_table': 'forms',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('answer_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('percentage', 'Percentage')], max_length=10)),
                ('is_required', models.BooleanField(default=False)),
                ('display_order', models.IntegerField()),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='RawImport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('original_id', models.CharField(blank=True, max_length=50, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('division', models.CharField(blank=True, max_length=100, null=True)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('school', models.CharField(blank=True, max_length=100, null=True)),
                ('school_id', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'raw_imports',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'regions',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('school_name', models.CharField(max_length=100)),
                ('school_id', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('district', models.ForeignKey(db_column='district_id', on_delete=django.db.models.deletion.CASCADE, to='core.district')),
                ('division', models.ForeignKey(db_column='division_id', on_delete=django.db.models.deletion.CASCADE, to='core.division')),
                ('region', models.ForeignKey(db_column='region_id', on_delete=django.db.models.deletion.CASCADE, to='core.region')),
            ],
            options={
                'db_table': 'schools',
            },
        ),
        migrations.CreateModel(
            name='SubSection',
            fields=[
                ('sub_section_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('display_order', models.IntegerField()),
                ('category', models.ForeignKey(db_column='category_id', on_delete=django.db.models.deletion.CASCADE, to='core.category')),
            ],
            options={
                'db_table': 'sub_sections',
            },
        ),
        migrations.CreateModel(
            name='UsersSchool',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('password_hash', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('role', models.CharField(choices=[('school', 'School')], max_length=10)),
                ('school_name', models.CharField(max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approval_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='approved', max_length=10)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_school_users', to='core.adminuser')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_school_users', to='core.adminuser')),
                ('district', models.ForeignKey(blank=True, db_column='district_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.district')),
                ('division', models.ForeignKey(blank=True, db_column='division_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.division')),
                ('region', models.ForeignKey(blank=True, db_column='region_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.region')),
                ('school', models.ForeignKey(blank=True, db_column='school_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.school')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'users_school',
            },
        ),
        migrations.CreateModel(
            name='UserCreationRequest',
            fields=[
                ('request_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=150)),
                ('full_name', models.CharField(max_length=150)),
                ('requested_role', models.CharField(max_length=20)),
                ('justification', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'User Created')], default='pending', max_length=10)),
                ('approval_comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_approvals', to='core.adminuser')),
                ('created_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.usersschool')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.district')),
                ('division', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.division')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.region')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_creation_requests', to='core.adminuser')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.school')),
            ],
            options={
                'db_table': 'user_creation_requests',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('display_order', models.IntegerField()),
                ('sub_section', models.ForeignKey(db_column='sub_section_id', on_delete=django.db.models.deletion.CASCADE, to='core.subsection')),
            ],
            options={
                'db_table': 'topics',
            },
        ),
        migrations.CreateModel(
            name='SubQuestion',
            fields=[
                ('sub_question_id', models.AutoField(primary_key=True, serialize=False)),
                ('sub_question_text', models.CharField(max_length=255)),
                ('answer_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('percentage', 'Percentage')], default='text', max_length=10)),
                ('display_order', models.IntegerField(default=1)),
                ('question', models.ForeignKey(db_column='question_id', on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
            options={
                'db_table': 'sub_questions',
            },
        ),
        migrations.CreateModel(
            name='SecuritySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting_key', models.CharField(max_length=100, unique=True)),
                ('setting_value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Setting',
                'verbose_name_plural': 'Security Settings',
                'db_table': 'security_settings',
            },
        ),
        migrations.CreateModel(
            name='SecurityIncident',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('incident_type', models.CharField(choices=[('brute_force', 'Brute Force Attack'), ('suspicious_login', 'Suspicious Login'), ('data_breach', 'Data Breach'), ('unauthorized_access', 'Unauthorized Access'), ('malware', 'Malware Detection'), ('phishing', 'Phishing Attempt'), ('ddos', 'DDoS Attack'), ('privilege_escalation', 'Privilege Escalation'), ('data_exfiltration', 'Data Exfiltration'), ('other', 'Other')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='open', max_length=15)),
                ('ip_addresses', models.JSONField(blank=True, default=list)),
                ('detection_time', models.DateTimeField(auto_now_add=True)),
                ('resolution_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('automated_response', models.BooleanField(default=False)),
                ('affected_users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'security_incidents',
                'ordering': ['-detection_time'],
            },
        ),
        migrations.CreateModel(
            name='SecurityAlert',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('failed_login', 'Multiple Failed Logins'), ('suspicious_activity', 'Suspicious Activity'), ('data_breach', 'Potential Data Breach'), ('unauthorized_access', 'Unauthorized Access'), ('system_compromise', 'System Compromise'), ('policy_violation', 'Policy Violation')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('affected_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'security_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionChoice',
            fields=[
                ('choice_id', models.AutoField(primary_key=True, serialize=False)),
                ('choice_text', models.CharField(max_length=255)),
                ('question', models.ForeignKey(db_column='question_id', on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
            options={
                'db_table': 'question_choices',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(db_column='topic_id', on_delete=django.db.models.deletion.CASCADE, to='core.topic'),
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('success', models.BooleanField()),
                ('failure_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('is_suspicious', models.BooleanField(default=False)),
                ('blocked', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'login_attempts',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['username', 'timestamp'], name='login_attem_usernam_ece61f_idx'), models.Index(fields=['ip_address', 'timestamp'], name='login_attem_ip_addr_340a7c_idx'), models.Index(fields=['success', 'timestamp'], name='login_attem_success_f3dfbd_idx')],
            },
        ),
        migrations.CreateModel(
            name='FormNotification',
            fields=[
                ('notification_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('form_submitted', 'Form Submitted'), ('form_approved', 'Form Approved'), ('form_returned', 'Form Returned'), ('form_rejected', 'Form Rejected'), ('deadline_reminder', 'Deadline Reminder'), ('overdue_notification', 'Overdue Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_required', models.BooleanField(default=False)),
                ('action_url', models.CharField(blank=True, max_length=500, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.form')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to='core.adminuser')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to='core.adminuser')),
            ],
            options={
                'db_table': 'form_notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FormDeadline',
            fields=[
                ('deadline_id', models.AutoField(primary_key=True, serialize=False)),
                ('form_type', models.CharField(max_length=100)),
                ('deadline_date', models.DateTimeField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_deadlines', to='core.adminuser')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.district')),
                ('division', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.division')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.region')),
            ],
            options={
                'db_table': 'form_deadlines',
            },
        ),
        migrations.CreateModel(
            name='FormApproval',
            fields=[
                ('approval_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('approval_level', models.CharField(choices=[('district', 'District'), ('division', 'Division'), ('region', 'Region'), ('central', 'Central Office')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('returned', 'Returned for Revision')], default='pending', max_length=10)),
                ('comments', models.TextField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals_made', to='core.adminuser')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='core.form')),
            ],
            options={
                'db_table': 'form_approvals',
            },
        ),
        migrations.AddField(
            model_name='form',
            name='school',
            field=models.ForeignKey(db_column='school_id', on_delete=django.db.models.deletion.CASCADE, to='core.school'),
        ),
        migrations.AddField(
            model_name='form',
            name='user',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EncryptedFormData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_id', models.CharField(max_length=50)),
                ('question_id', models.CharField(max_length=50)),
                ('encrypted_data', models.TextField()),
                ('encryption_key_id', models.CharField(max_length=50)),
                ('data_hash', models.CharField(max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accessed_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'encrypted_form_data',
                'indexes': [models.Index(fields=['form_id', 'question_id'], name='encrypted_f_form_id_af8dc3_idx'), models.Index(fields=['encryption_key_id'], name='encrypted_f_encrypt_d2d653_idx')],
            },
        ),
        migrations.AddField(
            model_name='division',
            name='region',
            field=models.ForeignKey(db_column='region_id', on_delete=django.db.models.deletion.CASCADE, to='core.region'),
        ),
        migrations.AddField(
            model_name='district',
            name='division',
            field=models.ForeignKey(db_column='division_id', on_delete=django.db.models.deletion.CASCADE, to='core.division'),
        ),
        migrations.CreateModel(
            name='DataSubjectRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('access', 'Data Access Request'), ('rectification', 'Data Rectification'), ('erasure', 'Data Erasure (Right to be Forgotten)'), ('portability', 'Data Portability'), ('restriction', 'Restriction of Processing'), ('objection', 'Objection to Processing')], max_length=15)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=15)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, default=dict)),
                ('verification_token', models.CharField(max_length=100, unique=True)),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_subject_requests',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='DataProcessingConsent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(choices=[('data_processing', 'Data Processing'), ('marketing', 'Marketing Communications'), ('analytics', 'Analytics'), ('third_party', 'Third Party Sharing')], max_length=20)),
                ('granted', models.BooleanField()),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('withdrawn_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('consent_text', models.TextField()),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'data_processing_consent',
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('gdpr', 'GDPR Compliance Report'), ('security_audit', 'Security Audit Report'), ('data_access', 'Data Access Report'), ('user_activity', 'User Activity Report'), ('incident_summary', 'Security Incident Summary')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('date_from', models.DateTimeField()),
                ('date_to', models.DateTimeField()),
                ('report_data', models.JSONField(default=dict)),
                ('file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('is_encrypted', models.BooleanField(default=True)),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'compliance_reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['display_order'], name='idx_categories_order'),
        ),
        migrations.AddField(
            model_name='audittrail',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.question'),
        ),
        migrations.AddField(
            model_name='audittrail',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='form',
            field=models.ForeignKey(db_column='form_id', on_delete=django.db.models.deletion.CASCADE, to='core.form'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(db_column='question_id', on_delete=django.db.models.deletion.CASCADE, to='core.question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='sub_question',
            field=models.ForeignKey(blank=True, db_column='sub_question_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.subquestion'),
        ),
        migrations.AddField(
            model_name='adminuserpermission',
            name='admin_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='adminuserpermission',
            name='granted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_permissions', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='district',
            field=models.ForeignKey(blank=True, db_column='district_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.district'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='division',
            field=models.ForeignKey(blank=True, db_column='division_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.division'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='region',
            field=models.ForeignKey(blank=True, db_column='region_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.region'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='school',
            field=models.ForeignKey(blank=True, db_column='school_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.school'),
        ),
        migrations.AddField(
            model_name='adminuser',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_users', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='adminsession',
            name='admin_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='adminactivitylog',
            name='admin_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='core.adminuser'),
        ),
        migrations.AddField(
            model_name='accountlockout',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.usersschool'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['region'], name='userschool_region_id_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['division'], name='userschool_division_id_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['district'], name='userschool_district_id_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['school'], name='userschool_school_id_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['created_by'], name='usr_sch_created_by_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['approved_by'], name='usr_sch_approved_by_idx'),
        ),
        migrations.AddIndex(
            model_name='usersschool',
            index=models.Index(fields=['approval_status'], name='usr_sch_approval_idx'),
        ),
        migrations.AddIndex(
            model_name='usercreationrequest',
            index=models.Index(fields=['requested_by', 'status'], name='user_creati_request_540cc9_idx'),
        ),
        migrations.AddIndex(
            model_name='usercreationrequest',
            index=models.Index(fields=['status', 'created_at'], name='user_creati_status_93874d_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['sub_section'], name='topic_sub_section_id_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['display_order'], name='idx_topics_order'),
        ),
        migrations.AddIndex(
            model_name='subsection',
            index=models.Index(fields=['category'], name='subsection_category_id_idx'),
        ),
        migrations.AddIndex(
            model_name='subsection',
            index=models.Index(fields=['display_order'], name='idx_sub_sections_order'),
        ),
        migrations.AddIndex(
            model_name='subquestion',
            index=models.Index(fields=['question'], name='idx_sub_questions_question_id'),
        ),
        migrations.AddIndex(
            model_name='subquestion',
            index=models.Index(fields=['display_order'], name='idx_sub_questions_order'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['district'], name='school_district_id_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['division'], name='school_division_id_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['region'], name='school_region_id_idx'),
        ),
        migrations.AddIndex(
            model_name='questionchoice',
            index=models.Index(fields=['question'], name='questionchoice_question_id_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['topic'], name='question_topic_id_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['display_order'], name='idx_questions_order'),
        ),
        migrations.AddIndex(
            model_name='formnotification',
            index=models.Index(fields=['recipient', 'is_read'], name='form_notifi_recipie_d44846_idx'),
        ),
        migrations.AddIndex(
            model_name='formnotification',
            index=models.Index(fields=['form', 'notification_type'], name='form_notifi_form_id_fd0a3e_idx'),
        ),
        migrations.AddIndex(
            model_name='formnotification',
            index=models.Index(fields=['created_at'], name='form_notifi_created_9032bf_idx'),
        ),
        migrations.AddIndex(
            model_name='formnotification',
            index=models.Index(fields=['priority', 'created_at'], name='form_notifi_priorit_092a56_idx'),
        ),
        migrations.AddIndex(
            model_name='formdeadline',
            index=models.Index(fields=['region', 'deadline_date'], name='form_deadli_region__1311d1_idx'),
        ),
        migrations.AddIndex(
            model_name='formdeadline',
            index=models.Index(fields=['division', 'deadline_date'], name='form_deadli_divisio_37374e_idx'),
        ),
        migrations.AddIndex(
            model_name='formdeadline',
            index=models.Index(fields=['district', 'deadline_date'], name='form_deadli_distric_cb1f36_idx'),
        ),
        migrations.AddIndex(
            model_name='formdeadline',
            index=models.Index(fields=['form_type', 'deadline_date'], name='form_deadli_form_ty_3d553a_idx'),
        ),
        migrations.AddIndex(
            model_name='formapproval',
            index=models.Index(fields=['form', 'approval_level'], name='form_approv_form_id_77030d_idx'),
        ),
        migrations.AddIndex(
            model_name='formapproval',
            index=models.Index(fields=['approver', 'status'], name='form_approv_approve_f20ce4_idx'),
        ),
        migrations.AddIndex(
            model_name='formapproval',
            index=models.Index(fields=['approval_level', 'status'], name='form_approv_approva_472ef2_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['user'], name='form_user_id_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['school'], name='form_school_id_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['status'], name='form_status_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['current_level'], name='form_current_level_idx'),
        ),
        migrations.AddIndex(
            model_name='form',
            index=models.Index(fields=['submitted_at'], name='form_submitted_at_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='form',
            unique_together={('user', 'school', 'academic_year')},
        ),
        migrations.AddIndex(
            model_name='division',
            index=models.Index(fields=['region'], name='division_region_id_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['division'], name='district_division_id_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dataprocessingconsent',
            unique_together={('user', 'consent_type', 'version')},
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'timestamp'], name='audit_logs_user_id_88267f_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action_type', 'timestamp'], name='audit_logs_action__11f9f1_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['severity', 'timestamp'], name='audit_logs_severit_549d29_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['ip_address', 'timestamp'], name='audit_logs_ip_addr_932507_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['resource_type', 'resource_id'], name='audit_logs_resourc_bda8a6_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['form'], name='idx_answers_form'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question'], name='idx_answers_question'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['sub_question'], name='idx_answers_sub_question'),
        ),
        migrations.AddIndex(
            model_name='adminuserpermission',
            index=models.Index(fields=['admin_user', 'resource_type'], name='adm_perm_usr_res_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuserpermission',
            index=models.Index(fields=['resource_type', 'action'], name='adm_perm_res_act_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='adminuserpermission',
            unique_together={('admin_user', 'permission_name', 'resource_type', 'action')},
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['admin_level', 'status'], name='admin_user_admin_l_60f17d_idx'),
        ),
        migrations.AddIndex(
            model_name='adminuser',
            index=models.Index(fields=['region', 'division', 'district'], name='admin_user_region__cf202c_idx'),
        ),
        migrations.AddIndex(
            model_name='adminsession',
            index=models.Index(fields=['admin_user', 'is_active'], name='adm_sess_usr_act_idx'),
        ),
        migrations.AddIndex(
            model_name='adminsession',
            index=models.Index(fields=['expires_at'], name='adm_sess_exp_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['admin_user', 'timestamp'], name='adm_log_usr_time_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['action', 'timestamp'], name='adm_log_act_time_idx'),
        ),
        migrations.AddIndex(
            model_name='adminactivitylog',
            index=models.Index(fields=['resource_type', 'timestamp'], name='adm_log_res_time_idx'),
        ),
    ]
